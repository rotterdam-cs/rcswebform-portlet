/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rcs.dbservice.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rcs.dbservice.model.WebformTable;
import com.rcs.dbservice.model.WebformTableModel;
import com.rcs.dbservice.model.WebformTableSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WebformTable service. Represents a row in the &quot;RcsWebform_WebformTable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rcs.dbservice.model.WebformTableModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WebformTableImpl}.
 * </p>
 *
 * @author rikad.ramadhan@rotterdam-cs.com
 * @see WebformTableImpl
 * @see com.rcs.dbservice.model.WebformTable
 * @see com.rcs.dbservice.model.WebformTableModel
 * @generated
 */
@JSON(strict = true)
public class WebformTableModelImpl extends BaseModelImpl<WebformTable>
	implements WebformTableModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a webform table model instance should use the {@link com.rcs.dbservice.model.WebformTable} interface instead.
	 */
	public static final String TABLE_NAME = "RcsWebform_WebformTable";
	public static final Object[][] TABLE_COLUMNS = {
			{ "webformTableId", Types.BIGINT },
			{ "portletId", Types.VARCHAR },
			{ "webformCounter", Types.VARCHAR },
			{ "webformName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table RcsWebform_WebformTable (webformTableId LONG not null primary key,portletId VARCHAR(75) null,webformCounter VARCHAR(75) null,webformName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table RcsWebform_WebformTable";
	public static final String ORDER_BY_JPQL = " ORDER BY webformTable.webformTableId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY RcsWebform_WebformTable.webformTableId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rcs.dbservice.model.WebformTable"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rcs.dbservice.model.WebformTable"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rcs.dbservice.model.WebformTable"),
			true);
	public static long PORTLETID_COLUMN_BITMASK = 1L;
	public static long WEBFORMCOUNTER_COLUMN_BITMASK = 2L;
	public static long WEBFORMNAME_COLUMN_BITMASK = 4L;
	public static long WEBFORMTABLEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WebformTable toModel(WebformTableSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WebformTable model = new WebformTableImpl();

		model.setWebformTableId(soapModel.getWebformTableId());
		model.setPortletId(soapModel.getPortletId());
		model.setWebformCounter(soapModel.getWebformCounter());
		model.setWebformName(soapModel.getWebformName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WebformTable> toModels(WebformTableSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WebformTable> models = new ArrayList<WebformTable>(soapModels.length);

		for (WebformTableSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rcs.dbservice.model.WebformTable"));

	public WebformTableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _webformTableId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWebformTableId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _webformTableId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WebformTable.class;
	}

	@Override
	public String getModelClassName() {
		return WebformTable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("webformTableId", getWebformTableId());
		attributes.put("portletId", getPortletId());
		attributes.put("webformCounter", getWebformCounter());
		attributes.put("webformName", getWebformName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long webformTableId = (Long)attributes.get("webformTableId");

		if (webformTableId != null) {
			setWebformTableId(webformTableId);
		}

		String portletId = (String)attributes.get("portletId");

		if (portletId != null) {
			setPortletId(portletId);
		}

		String webformCounter = (String)attributes.get("webformCounter");

		if (webformCounter != null) {
			setWebformCounter(webformCounter);
		}

		String webformName = (String)attributes.get("webformName");

		if (webformName != null) {
			setWebformName(webformName);
		}
	}

	@JSON
	@Override
	public long getWebformTableId() {
		return _webformTableId;
	}

	@Override
	public void setWebformTableId(long webformTableId) {
		_webformTableId = webformTableId;
	}

	@JSON
	@Override
	public String getPortletId() {
		if (_portletId == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletId;
		}
	}

	@Override
	public void setPortletId(String portletId) {
		_columnBitmask |= PORTLETID_COLUMN_BITMASK;

		if (_originalPortletId == null) {
			_originalPortletId = _portletId;
		}

		_portletId = portletId;
	}

	public String getOriginalPortletId() {
		return GetterUtil.getString(_originalPortletId);
	}

	@JSON
	@Override
	public String getWebformCounter() {
		if (_webformCounter == null) {
			return StringPool.BLANK;
		}
		else {
			return _webformCounter;
		}
	}

	@Override
	public void setWebformCounter(String webformCounter) {
		_columnBitmask |= WEBFORMCOUNTER_COLUMN_BITMASK;

		if (_originalWebformCounter == null) {
			_originalWebformCounter = _webformCounter;
		}

		_webformCounter = webformCounter;
	}

	public String getOriginalWebformCounter() {
		return GetterUtil.getString(_originalWebformCounter);
	}

	@JSON
	@Override
	public String getWebformName() {
		if (_webformName == null) {
			return StringPool.BLANK;
		}
		else {
			return _webformName;
		}
	}

	@Override
	public void setWebformName(String webformName) {
		_columnBitmask |= WEBFORMNAME_COLUMN_BITMASK;

		if (_originalWebformName == null) {
			_originalWebformName = _webformName;
		}

		_webformName = webformName;
	}

	public String getOriginalWebformName() {
		return GetterUtil.getString(_originalWebformName);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			WebformTable.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WebformTable toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WebformTable)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WebformTableImpl webformTableImpl = new WebformTableImpl();

		webformTableImpl.setWebformTableId(getWebformTableId());
		webformTableImpl.setPortletId(getPortletId());
		webformTableImpl.setWebformCounter(getWebformCounter());
		webformTableImpl.setWebformName(getWebformName());

		webformTableImpl.resetOriginalValues();

		return webformTableImpl;
	}

	@Override
	public int compareTo(WebformTable webformTable) {
		long primaryKey = webformTable.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WebformTable)) {
			return false;
		}

		WebformTable webformTable = (WebformTable)obj;

		long primaryKey = webformTable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WebformTableModelImpl webformTableModelImpl = this;

		webformTableModelImpl._originalPortletId = webformTableModelImpl._portletId;

		webformTableModelImpl._originalWebformCounter = webformTableModelImpl._webformCounter;

		webformTableModelImpl._originalWebformName = webformTableModelImpl._webformName;

		webformTableModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WebformTable> toCacheModel() {
		WebformTableCacheModel webformTableCacheModel = new WebformTableCacheModel();

		webformTableCacheModel.webformTableId = getWebformTableId();

		webformTableCacheModel.portletId = getPortletId();

		String portletId = webformTableCacheModel.portletId;

		if ((portletId != null) && (portletId.length() == 0)) {
			webformTableCacheModel.portletId = null;
		}

		webformTableCacheModel.webformCounter = getWebformCounter();

		String webformCounter = webformTableCacheModel.webformCounter;

		if ((webformCounter != null) && (webformCounter.length() == 0)) {
			webformTableCacheModel.webformCounter = null;
		}

		webformTableCacheModel.webformName = getWebformName();

		String webformName = webformTableCacheModel.webformName;

		if ((webformName != null) && (webformName.length() == 0)) {
			webformTableCacheModel.webformName = null;
		}

		return webformTableCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{webformTableId=");
		sb.append(getWebformTableId());
		sb.append(", portletId=");
		sb.append(getPortletId());
		sb.append(", webformCounter=");
		sb.append(getWebformCounter());
		sb.append(", webformName=");
		sb.append(getWebformName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.rcs.dbservice.model.WebformTable");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>webformTableId</column-name><column-value><![CDATA[");
		sb.append(getWebformTableId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletId</column-name><column-value><![CDATA[");
		sb.append(getPortletId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>webformCounter</column-name><column-value><![CDATA[");
		sb.append(getWebformCounter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>webformName</column-name><column-value><![CDATA[");
		sb.append(getWebformName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WebformTable.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WebformTable.class
		};
	private long _webformTableId;
	private String _portletId;
	private String _originalPortletId;
	private String _webformCounter;
	private String _originalWebformCounter;
	private String _webformName;
	private String _originalWebformName;
	private long _columnBitmask;
	private WebformTable _escapedModel;
}