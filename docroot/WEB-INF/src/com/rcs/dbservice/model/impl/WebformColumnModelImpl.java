/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rcs.dbservice.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rcs.dbservice.model.WebformColumn;
import com.rcs.dbservice.model.WebformColumnModel;
import com.rcs.dbservice.model.WebformColumnSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the WebformColumn service. Represents a row in the &quot;RcsWebform_WebformColumn&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rcs.dbservice.model.WebformColumnModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WebformColumnImpl}.
 * </p>
 *
 * @author rikad.ramadhan@rotterdam-cs.com
 * @see WebformColumnImpl
 * @see com.rcs.dbservice.model.WebformColumn
 * @see com.rcs.dbservice.model.WebformColumnModel
 * @generated
 */
@JSON(strict = true)
public class WebformColumnModelImpl extends BaseModelImpl<WebformColumn>
	implements WebformColumnModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a webform column model instance should use the {@link com.rcs.dbservice.model.WebformColumn} interface instead.
	 */
	public static final String TABLE_NAME = "RcsWebform_WebformColumn";
	public static final Object[][] TABLE_COLUMNS = {
			{ "webformColumnId", Types.BIGINT },
			{ "webformTableId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "type_", Types.INTEGER },
			{ "inputType", Types.INTEGER },
			{ "isRequired", Types.BOOLEAN },
			{ "placeHolder", Types.VARCHAR },
			{ "validation", Types.VARCHAR },
			{ "customValidation", Types.VARCHAR },
			{ "labelClass", Types.VARCHAR },
			{ "inputClass", Types.VARCHAR },
			{ "maxLength", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table RcsWebform_WebformColumn (webformColumnId LONG not null primary key,webformTableId LONG,name VARCHAR(75) null,type_ INTEGER,inputType INTEGER,isRequired BOOLEAN,placeHolder VARCHAR(75) null,validation VARCHAR(75) null,customValidation VARCHAR(75) null,labelClass VARCHAR(75) null,inputClass VARCHAR(75) null,maxLength VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table RcsWebform_WebformColumn";
	public static final String ORDER_BY_JPQL = " ORDER BY webformColumn.webformColumnId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY RcsWebform_WebformColumn.webformColumnId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rcs.dbservice.model.WebformColumn"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rcs.dbservice.model.WebformColumn"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rcs.dbservice.model.WebformColumn"),
			true);
	public static long WEBFORMTABLEID_COLUMN_BITMASK = 1L;
	public static long WEBFORMCOLUMNID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static WebformColumn toModel(WebformColumnSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		WebformColumn model = new WebformColumnImpl();

		model.setWebformColumnId(soapModel.getWebformColumnId());
		model.setWebformTableId(soapModel.getWebformTableId());
		model.setName(soapModel.getName());
		model.setType(soapModel.getType());
		model.setInputType(soapModel.getInputType());
		model.setIsRequired(soapModel.getIsRequired());
		model.setPlaceHolder(soapModel.getPlaceHolder());
		model.setValidation(soapModel.getValidation());
		model.setCustomValidation(soapModel.getCustomValidation());
		model.setLabelClass(soapModel.getLabelClass());
		model.setInputClass(soapModel.getInputClass());
		model.setMaxLength(soapModel.getMaxLength());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<WebformColumn> toModels(WebformColumnSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<WebformColumn> models = new ArrayList<WebformColumn>(soapModels.length);

		for (WebformColumnSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rcs.dbservice.model.WebformColumn"));

	public WebformColumnModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _webformColumnId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setWebformColumnId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _webformColumnId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return WebformColumn.class;
	}

	@Override
	public String getModelClassName() {
		return WebformColumn.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("webformColumnId", getWebformColumnId());
		attributes.put("webformTableId", getWebformTableId());
		attributes.put("name", getName());
		attributes.put("type", getType());
		attributes.put("inputType", getInputType());
		attributes.put("isRequired", getIsRequired());
		attributes.put("placeHolder", getPlaceHolder());
		attributes.put("validation", getValidation());
		attributes.put("customValidation", getCustomValidation());
		attributes.put("labelClass", getLabelClass());
		attributes.put("inputClass", getInputClass());
		attributes.put("maxLength", getMaxLength());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long webformColumnId = (Long)attributes.get("webformColumnId");

		if (webformColumnId != null) {
			setWebformColumnId(webformColumnId);
		}

		Long webformTableId = (Long)attributes.get("webformTableId");

		if (webformTableId != null) {
			setWebformTableId(webformTableId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Integer inputType = (Integer)attributes.get("inputType");

		if (inputType != null) {
			setInputType(inputType);
		}

		Boolean isRequired = (Boolean)attributes.get("isRequired");

		if (isRequired != null) {
			setIsRequired(isRequired);
		}

		String placeHolder = (String)attributes.get("placeHolder");

		if (placeHolder != null) {
			setPlaceHolder(placeHolder);
		}

		String validation = (String)attributes.get("validation");

		if (validation != null) {
			setValidation(validation);
		}

		String customValidation = (String)attributes.get("customValidation");

		if (customValidation != null) {
			setCustomValidation(customValidation);
		}

		String labelClass = (String)attributes.get("labelClass");

		if (labelClass != null) {
			setLabelClass(labelClass);
		}

		String inputClass = (String)attributes.get("inputClass");

		if (inputClass != null) {
			setInputClass(inputClass);
		}

		String maxLength = (String)attributes.get("maxLength");

		if (maxLength != null) {
			setMaxLength(maxLength);
		}
	}

	@JSON
	@Override
	public long getWebformColumnId() {
		return _webformColumnId;
	}

	@Override
	public void setWebformColumnId(long webformColumnId) {
		_webformColumnId = webformColumnId;
	}

	@JSON
	@Override
	public long getWebformTableId() {
		return _webformTableId;
	}

	@Override
	public void setWebformTableId(long webformTableId) {
		_columnBitmask |= WEBFORMTABLEID_COLUMN_BITMASK;

		if (!_setOriginalWebformTableId) {
			_setOriginalWebformTableId = true;

			_originalWebformTableId = _webformTableId;
		}

		_webformTableId = webformTableId;
	}

	public long getOriginalWebformTableId() {
		return _originalWebformTableId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_type = type;
	}

	@JSON
	@Override
	public int getInputType() {
		return _inputType;
	}

	@Override
	public void setInputType(int inputType) {
		_inputType = inputType;
	}

	@JSON
	@Override
	public boolean getIsRequired() {
		return _isRequired;
	}

	@Override
	public boolean isIsRequired() {
		return _isRequired;
	}

	@Override
	public void setIsRequired(boolean isRequired) {
		_isRequired = isRequired;
	}

	@JSON
	@Override
	public String getPlaceHolder() {
		if (_placeHolder == null) {
			return StringPool.BLANK;
		}
		else {
			return _placeHolder;
		}
	}

	@Override
	public void setPlaceHolder(String placeHolder) {
		_placeHolder = placeHolder;
	}

	@JSON
	@Override
	public String getValidation() {
		if (_validation == null) {
			return StringPool.BLANK;
		}
		else {
			return _validation;
		}
	}

	@Override
	public void setValidation(String validation) {
		_validation = validation;
	}

	@JSON
	@Override
	public String getCustomValidation() {
		if (_customValidation == null) {
			return StringPool.BLANK;
		}
		else {
			return _customValidation;
		}
	}

	@Override
	public void setCustomValidation(String customValidation) {
		_customValidation = customValidation;
	}

	@JSON
	@Override
	public String getLabelClass() {
		if (_labelClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _labelClass;
		}
	}

	@Override
	public void setLabelClass(String labelClass) {
		_labelClass = labelClass;
	}

	@JSON
	@Override
	public String getInputClass() {
		if (_inputClass == null) {
			return StringPool.BLANK;
		}
		else {
			return _inputClass;
		}
	}

	@Override
	public void setInputClass(String inputClass) {
		_inputClass = inputClass;
	}

	@JSON
	@Override
	public String getMaxLength() {
		if (_maxLength == null) {
			return StringPool.BLANK;
		}
		else {
			return _maxLength;
		}
	}

	@Override
	public void setMaxLength(String maxLength) {
		_maxLength = maxLength;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			WebformColumn.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public WebformColumn toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (WebformColumn)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		WebformColumnImpl webformColumnImpl = new WebformColumnImpl();

		webformColumnImpl.setWebformColumnId(getWebformColumnId());
		webformColumnImpl.setWebformTableId(getWebformTableId());
		webformColumnImpl.setName(getName());
		webformColumnImpl.setType(getType());
		webformColumnImpl.setInputType(getInputType());
		webformColumnImpl.setIsRequired(getIsRequired());
		webformColumnImpl.setPlaceHolder(getPlaceHolder());
		webformColumnImpl.setValidation(getValidation());
		webformColumnImpl.setCustomValidation(getCustomValidation());
		webformColumnImpl.setLabelClass(getLabelClass());
		webformColumnImpl.setInputClass(getInputClass());
		webformColumnImpl.setMaxLength(getMaxLength());

		webformColumnImpl.resetOriginalValues();

		return webformColumnImpl;
	}

	@Override
	public int compareTo(WebformColumn webformColumn) {
		long primaryKey = webformColumn.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof WebformColumn)) {
			return false;
		}

		WebformColumn webformColumn = (WebformColumn)obj;

		long primaryKey = webformColumn.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		WebformColumnModelImpl webformColumnModelImpl = this;

		webformColumnModelImpl._originalWebformTableId = webformColumnModelImpl._webformTableId;

		webformColumnModelImpl._setOriginalWebformTableId = false;

		webformColumnModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<WebformColumn> toCacheModel() {
		WebformColumnCacheModel webformColumnCacheModel = new WebformColumnCacheModel();

		webformColumnCacheModel.webformColumnId = getWebformColumnId();

		webformColumnCacheModel.webformTableId = getWebformTableId();

		webformColumnCacheModel.name = getName();

		String name = webformColumnCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			webformColumnCacheModel.name = null;
		}

		webformColumnCacheModel.type = getType();

		webformColumnCacheModel.inputType = getInputType();

		webformColumnCacheModel.isRequired = getIsRequired();

		webformColumnCacheModel.placeHolder = getPlaceHolder();

		String placeHolder = webformColumnCacheModel.placeHolder;

		if ((placeHolder != null) && (placeHolder.length() == 0)) {
			webformColumnCacheModel.placeHolder = null;
		}

		webformColumnCacheModel.validation = getValidation();

		String validation = webformColumnCacheModel.validation;

		if ((validation != null) && (validation.length() == 0)) {
			webformColumnCacheModel.validation = null;
		}

		webformColumnCacheModel.customValidation = getCustomValidation();

		String customValidation = webformColumnCacheModel.customValidation;

		if ((customValidation != null) && (customValidation.length() == 0)) {
			webformColumnCacheModel.customValidation = null;
		}

		webformColumnCacheModel.labelClass = getLabelClass();

		String labelClass = webformColumnCacheModel.labelClass;

		if ((labelClass != null) && (labelClass.length() == 0)) {
			webformColumnCacheModel.labelClass = null;
		}

		webformColumnCacheModel.inputClass = getInputClass();

		String inputClass = webformColumnCacheModel.inputClass;

		if ((inputClass != null) && (inputClass.length() == 0)) {
			webformColumnCacheModel.inputClass = null;
		}

		webformColumnCacheModel.maxLength = getMaxLength();

		String maxLength = webformColumnCacheModel.maxLength;

		if ((maxLength != null) && (maxLength.length() == 0)) {
			webformColumnCacheModel.maxLength = null;
		}

		return webformColumnCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{webformColumnId=");
		sb.append(getWebformColumnId());
		sb.append(", webformTableId=");
		sb.append(getWebformTableId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", inputType=");
		sb.append(getInputType());
		sb.append(", isRequired=");
		sb.append(getIsRequired());
		sb.append(", placeHolder=");
		sb.append(getPlaceHolder());
		sb.append(", validation=");
		sb.append(getValidation());
		sb.append(", customValidation=");
		sb.append(getCustomValidation());
		sb.append(", labelClass=");
		sb.append(getLabelClass());
		sb.append(", inputClass=");
		sb.append(getInputClass());
		sb.append(", maxLength=");
		sb.append(getMaxLength());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.rcs.dbservice.model.WebformColumn");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>webformColumnId</column-name><column-value><![CDATA[");
		sb.append(getWebformColumnId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>webformTableId</column-name><column-value><![CDATA[");
		sb.append(getWebformTableId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inputType</column-name><column-value><![CDATA[");
		sb.append(getInputType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isRequired</column-name><column-value><![CDATA[");
		sb.append(getIsRequired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>placeHolder</column-name><column-value><![CDATA[");
		sb.append(getPlaceHolder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validation</column-name><column-value><![CDATA[");
		sb.append(getValidation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customValidation</column-name><column-value><![CDATA[");
		sb.append(getCustomValidation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>labelClass</column-name><column-value><![CDATA[");
		sb.append(getLabelClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inputClass</column-name><column-value><![CDATA[");
		sb.append(getInputClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxLength</column-name><column-value><![CDATA[");
		sb.append(getMaxLength());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = WebformColumn.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			WebformColumn.class
		};
	private long _webformColumnId;
	private long _webformTableId;
	private long _originalWebformTableId;
	private boolean _setOriginalWebformTableId;
	private String _name;
	private int _type;
	private int _inputType;
	private boolean _isRequired;
	private String _placeHolder;
	private String _validation;
	private String _customValidation;
	private String _labelClass;
	private String _inputClass;
	private String _maxLength;
	private long _columnBitmask;
	private WebformColumn _escapedModel;
}