/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rcs.webform.model.impl;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rcs.webform.model.FormItemOption;
import com.rcs.webform.model.FormItemOptionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the FormItemOption service. Represents a row in the &quot;rcswebform_FormItemOption&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rcs.webform.model.FormItemOptionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FormItemOptionImpl}.
 * </p>
 *
 * @author ryusuf
 * @see FormItemOptionImpl
 * @see com.rcs.webform.model.FormItemOption
 * @see com.rcs.webform.model.FormItemOptionModel
 * @generated
 */
public class FormItemOptionModelImpl extends BaseModelImpl<FormItemOption>
	implements FormItemOptionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a form item option model instance should use the {@link com.rcs.webform.model.FormItemOption} interface instead.
	 */
	public static final String TABLE_NAME = "rcswebform_FormItemOption";
	public static final Object[][] TABLE_COLUMNS = {
			{ "formitemoptionId", Types.BIGINT },
			{ "creationDate", Types.TIMESTAMP },
			{ "modificationDate", Types.TIMESTAMP },
			{ "modificationUser", Types.VARCHAR },
			{ "formItemId", Types.BIGINT },
			{ "optionKey", Types.VARCHAR },
			{ "optionValue", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table rcswebform_FormItemOption (formitemoptionId LONG not null primary key,creationDate DATE null,modificationDate DATE null,modificationUser VARCHAR(75) null,formItemId LONG,optionKey STRING null,optionValue STRING null)";
	public static final String TABLE_SQL_DROP = "drop table rcswebform_FormItemOption";
	public static final String ORDER_BY_JPQL = " ORDER BY formItemOption.formitemoptionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY rcswebform_FormItemOption.formitemoptionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rcs.webform.model.FormItemOption"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rcs.webform.model.FormItemOption"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rcs.webform.model.FormItemOption"));

	public FormItemOptionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _formitemoptionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFormitemoptionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _formitemoptionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FormItemOption.class;
	}

	@Override
	public String getModelClassName() {
		return FormItemOption.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("formitemoptionId", getFormitemoptionId());
		attributes.put("creationDate", getCreationDate());
		attributes.put("modificationDate", getModificationDate());
		attributes.put("modificationUser", getModificationUser());
		attributes.put("formItemId", getFormItemId());
		attributes.put("optionKey", getOptionKey());
		attributes.put("optionValue", getOptionValue());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long formitemoptionId = (Long)attributes.get("formitemoptionId");

		if (formitemoptionId != null) {
			setFormitemoptionId(formitemoptionId);
		}

		Date creationDate = (Date)attributes.get("creationDate");

		if (creationDate != null) {
			setCreationDate(creationDate);
		}

		Date modificationDate = (Date)attributes.get("modificationDate");

		if (modificationDate != null) {
			setModificationDate(modificationDate);
		}

		String modificationUser = (String)attributes.get("modificationUser");

		if (modificationUser != null) {
			setModificationUser(modificationUser);
		}

		Long formItemId = (Long)attributes.get("formItemId");

		if (formItemId != null) {
			setFormItemId(formItemId);
		}

		String optionKey = (String)attributes.get("optionKey");

		if (optionKey != null) {
			setOptionKey(optionKey);
		}

		String optionValue = (String)attributes.get("optionValue");

		if (optionValue != null) {
			setOptionValue(optionValue);
		}
	}

	@Override
	public long getFormitemoptionId() {
		return _formitemoptionId;
	}

	@Override
	public void setFormitemoptionId(long formitemoptionId) {
		_formitemoptionId = formitemoptionId;
	}

	@Override
	public Date getCreationDate() {
		return _creationDate;
	}

	@Override
	public void setCreationDate(Date creationDate) {
		_creationDate = creationDate;
	}

	@Override
	public Date getModificationDate() {
		return _modificationDate;
	}

	@Override
	public void setModificationDate(Date modificationDate) {
		_modificationDate = modificationDate;
	}

	@Override
	public String getModificationUser() {
		if (_modificationUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _modificationUser;
		}
	}

	@Override
	public void setModificationUser(String modificationUser) {
		_modificationUser = modificationUser;
	}

	@Override
	public long getFormItemId() {
		return _formItemId;
	}

	@Override
	public void setFormItemId(long formItemId) {
		_formItemId = formItemId;
	}

	@Override
	public String getOptionKey() {
		if (_optionKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _optionKey;
		}
	}

	@Override
	public String getOptionKey(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getOptionKey(languageId);
	}

	@Override
	public String getOptionKey(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getOptionKey(languageId, useDefault);
	}

	@Override
	public String getOptionKey(String languageId) {
		return LocalizationUtil.getLocalization(getOptionKey(), languageId);
	}

	@Override
	public String getOptionKey(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getOptionKey(), languageId,
			useDefault);
	}

	@Override
	public String getOptionKeyCurrentLanguageId() {
		return _optionKeyCurrentLanguageId;
	}

	@JSON
	@Override
	public String getOptionKeyCurrentValue() {
		Locale locale = getLocale(_optionKeyCurrentLanguageId);

		return getOptionKey(locale);
	}

	@Override
	public Map<Locale, String> getOptionKeyMap() {
		return LocalizationUtil.getLocalizationMap(getOptionKey());
	}

	@Override
	public void setOptionKey(String optionKey) {
		_optionKey = optionKey;
	}

	@Override
	public void setOptionKey(String optionKey, Locale locale) {
		setOptionKey(optionKey, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setOptionKey(String optionKey, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(optionKey)) {
			setOptionKey(LocalizationUtil.updateLocalization(getOptionKey(),
					"OptionKey", optionKey, languageId, defaultLanguageId));
		}
		else {
			setOptionKey(LocalizationUtil.removeLocalization(getOptionKey(),
					"OptionKey", languageId));
		}
	}

	@Override
	public void setOptionKeyCurrentLanguageId(String languageId) {
		_optionKeyCurrentLanguageId = languageId;
	}

	@Override
	public void setOptionKeyMap(Map<Locale, String> optionKeyMap) {
		setOptionKeyMap(optionKeyMap, LocaleUtil.getDefault());
	}

	@Override
	public void setOptionKeyMap(Map<Locale, String> optionKeyMap,
		Locale defaultLocale) {
		if (optionKeyMap == null) {
			return;
		}

		setOptionKey(LocalizationUtil.updateLocalization(optionKeyMap,
				getOptionKey(), "OptionKey",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getOptionValue() {
		if (_optionValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _optionValue;
		}
	}

	@Override
	public String getOptionValue(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getOptionValue(languageId);
	}

	@Override
	public String getOptionValue(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getOptionValue(languageId, useDefault);
	}

	@Override
	public String getOptionValue(String languageId) {
		return LocalizationUtil.getLocalization(getOptionValue(), languageId);
	}

	@Override
	public String getOptionValue(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getOptionValue(), languageId,
			useDefault);
	}

	@Override
	public String getOptionValueCurrentLanguageId() {
		return _optionValueCurrentLanguageId;
	}

	@JSON
	@Override
	public String getOptionValueCurrentValue() {
		Locale locale = getLocale(_optionValueCurrentLanguageId);

		return getOptionValue(locale);
	}

	@Override
	public Map<Locale, String> getOptionValueMap() {
		return LocalizationUtil.getLocalizationMap(getOptionValue());
	}

	@Override
	public void setOptionValue(String optionValue) {
		_optionValue = optionValue;
	}

	@Override
	public void setOptionValue(String optionValue, Locale locale) {
		setOptionValue(optionValue, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setOptionValue(String optionValue, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(optionValue)) {
			setOptionValue(LocalizationUtil.updateLocalization(
					getOptionValue(), "OptionValue", optionValue, languageId,
					defaultLanguageId));
		}
		else {
			setOptionValue(LocalizationUtil.removeLocalization(
					getOptionValue(), "OptionValue", languageId));
		}
	}

	@Override
	public void setOptionValueCurrentLanguageId(String languageId) {
		_optionValueCurrentLanguageId = languageId;
	}

	@Override
	public void setOptionValueMap(Map<Locale, String> optionValueMap) {
		setOptionValueMap(optionValueMap, LocaleUtil.getDefault());
	}

	@Override
	public void setOptionValueMap(Map<Locale, String> optionValueMap,
		Locale defaultLocale) {
		if (optionValueMap == null) {
			return;
		}

		setOptionValue(LocalizationUtil.updateLocalization(optionValueMap,
				getOptionValue(), "OptionValue",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			FormItemOption.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> optionKeyMap = getOptionKeyMap();

		for (Map.Entry<Locale, String> entry : optionKeyMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> optionValueMap = getOptionValueMap();

		for (Map.Entry<Locale, String> entry : optionValueMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getOptionKey();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String optionKey = getOptionKey(defaultLocale);

		if (Validator.isNull(optionKey)) {
			setOptionKey(getOptionKey(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setOptionKey(getOptionKey(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String optionValue = getOptionValue(defaultLocale);

		if (Validator.isNull(optionValue)) {
			setOptionValue(getOptionValue(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setOptionValue(getOptionValue(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public FormItemOption toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FormItemOption)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FormItemOptionImpl formItemOptionImpl = new FormItemOptionImpl();

		formItemOptionImpl.setFormitemoptionId(getFormitemoptionId());
		formItemOptionImpl.setCreationDate(getCreationDate());
		formItemOptionImpl.setModificationDate(getModificationDate());
		formItemOptionImpl.setModificationUser(getModificationUser());
		formItemOptionImpl.setFormItemId(getFormItemId());
		formItemOptionImpl.setOptionKey(getOptionKey());
		formItemOptionImpl.setOptionValue(getOptionValue());

		formItemOptionImpl.resetOriginalValues();

		return formItemOptionImpl;
	}

	@Override
	public int compareTo(FormItemOption formItemOption) {
		long primaryKey = formItemOption.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FormItemOption)) {
			return false;
		}

		FormItemOption formItemOption = (FormItemOption)obj;

		long primaryKey = formItemOption.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<FormItemOption> toCacheModel() {
		FormItemOptionCacheModel formItemOptionCacheModel = new FormItemOptionCacheModel();

		formItemOptionCacheModel.formitemoptionId = getFormitemoptionId();

		Date creationDate = getCreationDate();

		if (creationDate != null) {
			formItemOptionCacheModel.creationDate = creationDate.getTime();
		}
		else {
			formItemOptionCacheModel.creationDate = Long.MIN_VALUE;
		}

		Date modificationDate = getModificationDate();

		if (modificationDate != null) {
			formItemOptionCacheModel.modificationDate = modificationDate.getTime();
		}
		else {
			formItemOptionCacheModel.modificationDate = Long.MIN_VALUE;
		}

		formItemOptionCacheModel.modificationUser = getModificationUser();

		String modificationUser = formItemOptionCacheModel.modificationUser;

		if ((modificationUser != null) && (modificationUser.length() == 0)) {
			formItemOptionCacheModel.modificationUser = null;
		}

		formItemOptionCacheModel.formItemId = getFormItemId();

		formItemOptionCacheModel.optionKey = getOptionKey();

		String optionKey = formItemOptionCacheModel.optionKey;

		if ((optionKey != null) && (optionKey.length() == 0)) {
			formItemOptionCacheModel.optionKey = null;
		}

		formItemOptionCacheModel.optionValue = getOptionValue();

		String optionValue = formItemOptionCacheModel.optionValue;

		if ((optionValue != null) && (optionValue.length() == 0)) {
			formItemOptionCacheModel.optionValue = null;
		}

		return formItemOptionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{formitemoptionId=");
		sb.append(getFormitemoptionId());
		sb.append(", creationDate=");
		sb.append(getCreationDate());
		sb.append(", modificationDate=");
		sb.append(getModificationDate());
		sb.append(", modificationUser=");
		sb.append(getModificationUser());
		sb.append(", formItemId=");
		sb.append(getFormItemId());
		sb.append(", optionKey=");
		sb.append(getOptionKey());
		sb.append(", optionValue=");
		sb.append(getOptionValue());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.rcs.webform.model.FormItemOption");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>formitemoptionId</column-name><column-value><![CDATA[");
		sb.append(getFormitemoptionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>creationDate</column-name><column-value><![CDATA[");
		sb.append(getCreationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modificationDate</column-name><column-value><![CDATA[");
		sb.append(getModificationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modificationUser</column-name><column-value><![CDATA[");
		sb.append(getModificationUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formItemId</column-name><column-value><![CDATA[");
		sb.append(getFormItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>optionKey</column-name><column-value><![CDATA[");
		sb.append(getOptionKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>optionValue</column-name><column-value><![CDATA[");
		sb.append(getOptionValue());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FormItemOption.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FormItemOption.class
		};
	private long _formitemoptionId;
	private Date _creationDate;
	private Date _modificationDate;
	private String _modificationUser;
	private long _formItemId;
	private String _optionKey;
	private String _optionKeyCurrentLanguageId;
	private String _optionValue;
	private String _optionValueCurrentLanguageId;
	private FormItemOption _escapedModel;
}