/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rcs.webform.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the FormItemOption service. Represents a row in the &quot;rcswebform_FormItemOption&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.rcs.webform.model.impl.FormItemOptionModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.rcs.webform.model.impl.FormItemOptionImpl}.
 * </p>
 *
 * @author ryusuf
 * @see FormItemOption
 * @see com.rcs.webform.model.impl.FormItemOptionImpl
 * @see com.rcs.webform.model.impl.FormItemOptionModelImpl
 * @generated
 */
public interface FormItemOptionModel extends BaseModel<FormItemOption> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a form item option model instance should use the {@link FormItemOption} interface instead.
	 */

	/**
	 * Returns the primary key of this form item option.
	 *
	 * @return the primary key of this form item option
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this form item option.
	 *
	 * @param primaryKey the primary key of this form item option
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the formitemoption ID of this form item option.
	 *
	 * @return the formitemoption ID of this form item option
	 */
	public long getFormitemoptionId();

	/**
	 * Sets the formitemoption ID of this form item option.
	 *
	 * @param formitemoptionId the formitemoption ID of this form item option
	 */
	public void setFormitemoptionId(long formitemoptionId);

	/**
	 * Returns the creation date of this form item option.
	 *
	 * @return the creation date of this form item option
	 */
	public Date getCreationDate();

	/**
	 * Sets the creation date of this form item option.
	 *
	 * @param creationDate the creation date of this form item option
	 */
	public void setCreationDate(Date creationDate);

	/**
	 * Returns the modification date of this form item option.
	 *
	 * @return the modification date of this form item option
	 */
	public Date getModificationDate();

	/**
	 * Sets the modification date of this form item option.
	 *
	 * @param modificationDate the modification date of this form item option
	 */
	public void setModificationDate(Date modificationDate);

	/**
	 * Returns the modification user of this form item option.
	 *
	 * @return the modification user of this form item option
	 */
	@AutoEscape
	public String getModificationUser();

	/**
	 * Sets the modification user of this form item option.
	 *
	 * @param modificationUser the modification user of this form item option
	 */
	public void setModificationUser(String modificationUser);

	/**
	 * Returns the form item ID of this form item option.
	 *
	 * @return the form item ID of this form item option
	 */
	public long getFormItemId();

	/**
	 * Sets the form item ID of this form item option.
	 *
	 * @param formItemId the form item ID of this form item option
	 */
	public void setFormItemId(long formItemId);

	/**
	 * Returns the option key of this form item option.
	 *
	 * @return the option key of this form item option
	 */
	public String getOptionKey();

	/**
	 * Returns the localized option key of this form item option in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized option key of this form item option
	 */
	@AutoEscape
	public String getOptionKey(Locale locale);

	/**
	 * Returns the localized option key of this form item option in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized option key of this form item option. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getOptionKey(Locale locale, boolean useDefault);

	/**
	 * Returns the localized option key of this form item option in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized option key of this form item option
	 */
	@AutoEscape
	public String getOptionKey(String languageId);

	/**
	 * Returns the localized option key of this form item option in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized option key of this form item option
	 */
	@AutoEscape
	public String getOptionKey(String languageId, boolean useDefault);

	@AutoEscape
	public String getOptionKeyCurrentLanguageId();

	@AutoEscape
	public String getOptionKeyCurrentValue();

	/**
	 * Returns a map of the locales and localized option keies of this form item option.
	 *
	 * @return the locales and localized option keies of this form item option
	 */
	public Map<Locale, String> getOptionKeyMap();

	/**
	 * Sets the option key of this form item option.
	 *
	 * @param optionKey the option key of this form item option
	 */
	public void setOptionKey(String optionKey);

	/**
	 * Sets the localized option key of this form item option in the language.
	 *
	 * @param optionKey the localized option key of this form item option
	 * @param locale the locale of the language
	 */
	public void setOptionKey(String optionKey, Locale locale);

	/**
	 * Sets the localized option key of this form item option in the language, and sets the default locale.
	 *
	 * @param optionKey the localized option key of this form item option
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setOptionKey(String optionKey, Locale locale,
		Locale defaultLocale);

	public void setOptionKeyCurrentLanguageId(String languageId);

	/**
	 * Sets the localized option keies of this form item option from the map of locales and localized option keies.
	 *
	 * @param optionKeyMap the locales and localized option keies of this form item option
	 */
	public void setOptionKeyMap(Map<Locale, String> optionKeyMap);

	/**
	 * Sets the localized option keies of this form item option from the map of locales and localized option keies, and sets the default locale.
	 *
	 * @param optionKeyMap the locales and localized option keies of this form item option
	 * @param defaultLocale the default locale
	 */
	public void setOptionKeyMap(Map<Locale, String> optionKeyMap,
		Locale defaultLocale);

	/**
	 * Returns the option value of this form item option.
	 *
	 * @return the option value of this form item option
	 */
	public String getOptionValue();

	/**
	 * Returns the localized option value of this form item option in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized option value of this form item option
	 */
	@AutoEscape
	public String getOptionValue(Locale locale);

	/**
	 * Returns the localized option value of this form item option in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized option value of this form item option. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getOptionValue(Locale locale, boolean useDefault);

	/**
	 * Returns the localized option value of this form item option in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized option value of this form item option
	 */
	@AutoEscape
	public String getOptionValue(String languageId);

	/**
	 * Returns the localized option value of this form item option in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized option value of this form item option
	 */
	@AutoEscape
	public String getOptionValue(String languageId, boolean useDefault);

	@AutoEscape
	public String getOptionValueCurrentLanguageId();

	@AutoEscape
	public String getOptionValueCurrentValue();

	/**
	 * Returns a map of the locales and localized option values of this form item option.
	 *
	 * @return the locales and localized option values of this form item option
	 */
	public Map<Locale, String> getOptionValueMap();

	/**
	 * Sets the option value of this form item option.
	 *
	 * @param optionValue the option value of this form item option
	 */
	public void setOptionValue(String optionValue);

	/**
	 * Sets the localized option value of this form item option in the language.
	 *
	 * @param optionValue the localized option value of this form item option
	 * @param locale the locale of the language
	 */
	public void setOptionValue(String optionValue, Locale locale);

	/**
	 * Sets the localized option value of this form item option in the language, and sets the default locale.
	 *
	 * @param optionValue the localized option value of this form item option
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setOptionValue(String optionValue, Locale locale,
		Locale defaultLocale);

	public void setOptionValueCurrentLanguageId(String languageId);

	/**
	 * Sets the localized option values of this form item option from the map of locales and localized option values.
	 *
	 * @param optionValueMap the locales and localized option values of this form item option
	 */
	public void setOptionValueMap(Map<Locale, String> optionValueMap);

	/**
	 * Sets the localized option values of this form item option from the map of locales and localized option values, and sets the default locale.
	 *
	 * @param optionValueMap the locales and localized option values of this form item option
	 * @param defaultLocale the default locale
	 */
	public void setOptionValueMap(Map<Locale, String> optionValueMap,
		Locale defaultLocale);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(FormItemOption formItemOption);

	@Override
	public int hashCode();

	@Override
	public CacheModel<FormItemOption> toCacheModel();

	@Override
	public FormItemOption toEscapedModel();

	@Override
	public FormItemOption toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}